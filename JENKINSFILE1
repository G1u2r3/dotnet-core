pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS = credentials('docker-credentials')
        SONARQUBE_SERVER = 'SonarQube'
        SONARQUBE_TOKEN = credentials('sonarqube-token')
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://your-repo-url.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'dotnet sonarscanner begin /k:"your_project_key" /d:sonar.login=$SONARQUBE_TOKEN'
                    sh 'dotnet build'
                    sh 'dotnet sonarscanner end /d:sonar.login=$SONARQUBE_TOKEN'
                }
            }
        }

        stage('Unit Tests') {
            steps {
                sh 'dotnet test'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t your-repo/your-app .'
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('', 'docker-credentials') {
                        sh 'docker push your-repo/your-app'
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh 'kubectl apply -f k8s/deployment.yaml'
                sh 'kubectl apply -f k8s/service.yaml'
            }
        }

        stage('Integration Tests') {
            steps {
                sh 'kubectl apply -f k8s/integration-tests.yaml'
            }
        }
    }

    post {
        always {
            junit '**/test-results/*.xml'
            cleanWs()
        }

        success {
            echo 'Deployment successful!'
        }

        failure {
            echo 'Deployment failed!'
        }
    }
}
